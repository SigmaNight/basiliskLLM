[project]
name = "basiliskllm"
dynamic = ["version"]
description = "Where LLMs Unite"
authors = [
    {name = "AndrÃ©-Abush Clause", email ="dev@andreabc.net"},
]
readme = "README.md"
license = { text = "GPL-2.0-only"}
requires-python = ">=3.12,<3.13"
dependencies = [
    "accessible-output3 @ git+https://github.com/SigmaNight/accessible_output3.git",
    "anthropic (>=0.49.0)",
    "babel (>=2.17.0)",
    "cx-freeze (>=7.2.10)",
    "fsspec (>=2025.2.0)",
    "google-genai (>=1.11.0,<2.0.0)",
    "httpx (>=0.28.1)",
    "keyring (>=25.6.0)",
    "markdown2 (>=2.5.3)",
    "more-itertools (>=10.6.0)",
    "numpy (>=2.2.1)",
    "ollama (>=0.4.7)",
    "openai (>=1.65.1)",
    "ordered-set (>=4.1.0)",
    "pillow (>=11.1.0)",
    "psutil (>=7.0.0)",
    "platformdirs (>=4.3.6)",
    "pydantic (>=2.10.6)",
    "pydantic-settings (>=2.8.1)",
    "pywin32 (>=308.0.0) ; sys_platform == 'win32'",
    "pyyaml (>=6.0.1)",
    "sounddevice (>=0.5.1)",
    "truststore (>=0.10.1)",
    "universal-pathlib (>=0.2.6)",
    "watchdog (>=6.0.0)",
    "wxpython (>=4.2.2)",
]
[project.urls]
homepage = "https://github.com/SigmaNight/basiliskLLM"
repository = "https://github.com/SigmaNight/basiliskLLM"
issues = "https://github.com/SigmaNight/basiliskLLM/issues"

[build-system]
requires = ["cx_freeze>+7.0.0", "setuptools>=64.0.0", "setuptools_scm>=8"]
build-backend = "cx_freeze.build"
[tool.setuptools]
packages = ["basilisk"]

[tool.setuptools_scm]

[tool.poetry]
package-mode = false
requires-poetry = ">=2.0"

[tool.poetry.group.dev.dependencies]
commitizen = "^4.6.0"
pre-commit = "^4.1.0"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
pytest-httpx = "^0.35.0"
ruff = "^0.11.8"
setuptools-scm = "^8.3.1"

[tool.coverage.run]
branch = true
source = ["basilisk"]
omit = ["basilisk/__main__.py", "*/tests/*", "*/res/*"]

[tool.coverage.report]
skip_empty = true
precision = 2

[tool.ruff]
src = ["src"]
respect-gitignore = true
line-length = 80
unsafe-fixes = false
target-version = "py312"
builtins = ["_", "gettext", "ngettext", "npgettext", "pgettext"]

[tool.ruff.format]
indent-style = "tab"
line-ending = "lf"
quote-style = "preserve"
skip-magic-trailing-comma = true

[tool.ruff.lint]
extend-select = ["INT","I","C90","D","T201","T203"]
extend-ignore = ["D206"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.isort]
known-first-party = ["basilisk"]
split-on-trailing-comma = false
[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"


[tool.cxfreeze]
executables = [
    {script="basilisk/__main__.py", base="gui", target_name="basilisk"},
]

[tool.cxfreeze.build_exe]
optimize = 1
build_exe = "dist"
excludes = [
    "babel.messages", "commitizen", "distutils", "email", "ftplib", "h11.tests", "jinja2",
    "multiprocessing",
    "numpy._core.tests", "numpy.f2py", "numpy.fft", "numpy.ma", "numpy.polynomial", "numpy.random", "numpy.testing",
    "packaging", "pip", "pydoc_data", "pytest", "_pytest", "pluggy",
    "setuptools", "setuptools_scm", "sqlite3",
    "tomllib", "test", "tkinter", "unittest",
    "wint32gui", "win32ui", "win32uiold", "winreg",
]
include_files = ["basilisk/res"]
includes = ["numpy", "win32timezone"]
include_msvcr = true
packages = ["numpy", "basilisk.provider_engine", "keyring", "fsspec.implementations", "upath.implementations"]
zip_include_packages = [
    "anyio", "annotated_types", "anthropic", "asyncio",
    "backports", "cachetools", "certifi", "cffi", "charset_normalizer", "concurrent", "collections", "colorama", "ctypes", "curses",
    "distro", "dotenv", "encodings", "email", "fsspec", "google", "googleapiclient", "grpc_status",
    "h11", "html", "httpcore", "http", "httplib2", "httpx",
    "idna", "importlib", "importlib_metadata", "importlib_resources",
    "jaraco", "jiter", "json", "keyring", "libloader", "logging",
    "more_itertools", "numpy", "ollama", "ordered_set", "openai",
    "PIL", "platform_utils", "platformdirs", "proto", "psutil", "pyasn1", "pyasn1_modules", "pycparser", "pyparsing", "pydantic", "pydantic_core", "pydantic_settings", "pywin", "pywin32_system32",
    "re", "rsa", "requests", "sniffio", "tarfile", "tokenizers", "tomli", "truststore", "tqdm", "uritemplate", "urllib", "urllib3", "upath", "typing_inspection",
    "watchdog", "websockets", "win32api", "win32com", "win32ctypes", "win32timezone",
    "xml", "yaml", "zipfile", "zipp", "zoneinfo",
    "basilisk"]
